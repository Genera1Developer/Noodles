|
name: Node.js CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x, 20.x, 22.x]

    steps:
    - uses: actions/checkout@v4
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install Dependencies
      run: npm ci

    - name: Lint
      run: npm run lint --if-present

    - name: Build
      run: npm run build --if-present

    - name: Run tests
      run: npm test --if-present
      env:
        CI: true

    - name: SonarCloud Scan
      if: github.event_name == 'push'
      uses: sonarsource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      with:
        args: >
          -Dsonar.organization=${{ secrets.SONARCLOUD_ORG }}
          -Dsonar.projectKey=${{ secrets.SONARCLOUD_PROJECT_KEY }}
          -Dsonar.sources=public
          -Dsonar.tests=public
          -Dsonar.javascript.lcov.reportPaths=public/coverage/lcov.info

    - name: Run security checks with Retire.js
      run: |
        npm install -g retire
        retire --node --outputformat json > public/retire-results.json
    - name: Upload RetireJS results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: retire-results
        path: public/retire-results.json

    - name: Run custom security scan
      run: |
        echo "Running custom security scan..."
        grep -rE "(password|api_key|secret)" public/ || true
        echo "Custom security scan completed."
    - name: Archive production artifacts
      if: github.event_name == 'push' && matrix.node-version == '22.x'
      uses: actions/upload-artifact@v3
      with:
        name: production-files
        path: public/
        retention-days: 5

    - name: Noodles Security Testing Tool
      run: |
        echo -e "\e[31m###############################################################################\e[0m"
        echo -e "\e[31m#                                                                             #\e[0m"
        echo -e "\e[31m#                    !!  NOODLES SECURITY TESTING TOOL  !!                    #\e[0m"
        echo -e "\e[31m#                                                                             #\e[0m"
        echo -e "\e[31m###############################################################################\e[0m"
        echo -e "\e[31m#  WARNING: This tool is for ETHICAL SECURITY TESTING PURPOSES ONLY.          #\e[0m"
        echo -e "\e[31m#  Unauthorized use is strictly prohibited and may be illegal.              #\e[0m"
        echo -e "\e[31m#  You are solely responsible for your actions while using this tool.        #\e[0m"
        echo -e "\e[31m#  The creators are not liable for any misuse or damage caused.              #\e[0m"
        echo -e "\e[31m###############################################################################\e[0m"
        echo -e "\e[31m#  DISCLAIMER: Use at your own risk. This tool is provided 'as is' without    #\e[0m"
        echo -e "\e[31m#  any warranty, express or implied.  Always obtain explicit permission      #\e[0m"
        echo -e "\e[31m#  before testing any system or network.                                     #\e[0m"
        echo -e "\e[31m###############################################################################\e[0m"
        echo -e "\e[31m#  USER CONSENT REQUIRED: By proceeding, you acknowledge and agree to these  #\e[0m"
        echo -e "\e[31m#  terms. Type 'I AGREE' (in ALL CAPS) to continue:                          #\e[0m"
        echo -e "\e[31m###############################################################################\e[0m\e[0m"
        read -r user_consent
        if [ "$user_consent" != "I AGREE" ]; then
          echo -e "\e[31mUser consent not received. Exiting.\e[0m"
          exit 1
        fi
        echo -e "\e[32mUser consent granted. Proceeding...\e[0m"

        # Logging Function
        log_action() {
          local message="$1"
          echo -e "\e[30m[\e[31m$(date +%Y-%m-%d_%H:%M:%S)\e[30m]\e[0m $message" >> noodles_security_tool.log
        }

        # Permission Check Function
        check_permission() {
          local target="$1"
          # Basic check: Can we write to /tmp?  More sophisticated checks would be needed in reality.
          if [ ! -w "/tmp" ]; then
            echo -e "\e[31mError: Insufficient permissions to test target: $target.  Exiting.\e[0m"
            log_action "ERROR: Insufficient permissions to test target: $target."
            exit 1
          fi
        }

        # Safe Mode Check Function
        is_safe_mode() {
          local target="$1"
          if [[ "$target" != "localhost" && "$target" != "127.0.0.1" ]]; then
            echo -e "\e[33mWARNING: Target '$target' is not localhost.  Running in SAFE MODE.\e[0m"
            echo -e "\e[33mOnly dummy tests will be performed.\e[0m"
            return 1 # Indicate safe mode
          else
            return 0 # Indicate not safe mode
          fi
        }

        # Defacement Tool Simulation
        defacement_tool() {
          local target="$1"

          echo -e "\e[35m[Defacement Tool]\e[0m"
          echo -e "\e[31mWARNING: This is a SIMULATION for ethical testing ONLY.\e[0m"
          echo -e "\e[31mNever deface a website without explicit permission.\e[0m"

          if is_safe_mode "$target"; then
            echo -e "\e[33m[SAFE MODE] Performing dummy defacement test on localhost.\e[0m"
            log_action "[SAFE MODE] Performed dummy defacement test on localhost."
          else
            check_permission "$target"
            echo -e "\e[34mSimulating defacement of: $target\e[0m"
            # Simulate backup (in reality, would copy files)
            mkdir -p ./defacement_backup
            echo "Dummy backup of website files" > ./defacement_backup/index.html
            log_action "Simulated backup of website files for $target."
            # Simulate defacement (in reality, would modify files)
            echo -e "\e[31m[DEFACED] This website has been ethically tested!\e[0m" > ./index.html
            log_action "Simulated defacement of $target."
            echo -e "\e[32mDefacement simulation completed. Check ./index.html and ./defacement_backup for details.\e[0m"
            echo -e "\e[31mIMPORTANT: Remember to remove any test files/artifacts created.\e[0m"

            # Simulate restore
            echo -e "\e[34mSimulating restore from backup...\e[0m"
            cp ./defacement_backup/index.html ./index.html
            log_action "Simulated restore of website files for $target."
            echo -e "\e[32mRestore simulation completed.\e[0m"
          fi
        }

        # DDoS Tool Simulation
        ddos_tool() {
          local target="$1"
          local duration="5" # Seconds
          local rate_limit="10" # Requests per second

          echo -e "\e[35m[DDoS Simulation Tool]\e[0m"
          echo -e "\e[31mWARNING: This is a SIMULATION for stress testing ONLY.\e[0m"
          echo -e "\e[31mNever perform a DDoS attack without explicit permission.\e[0m"
          echo -e "\e[31mRate limited to $rate_limit requests/second for $duration seconds.\e[0m"

          if is_safe_mode "$target"; then
            echo -e "\e[33m[SAFE MODE] Performing dummy DDoS simulation against localhost.\e[0m"
            log_action "[SAFE MODE] Performed dummy DDoS simulation against localhost."
          else
            check_permission "$target"
            echo -e "\e[34mSimulating DDoS attack against: $target for $duration seconds.\e[0m"

            # Simulate sending requests (in reality, would use tools like `ab` or `hey`)
            for i in $(seq 1 $(($duration * $rate_limit))); do
              sleep 0.1
              echo -e "\e[34mSending request $i to $target\e[0m"
              log_action "Simulated request $i to $target."
            done

            echo -e "\e[32mDDoS simulation completed. Simulated $duration seconds at $rate_limit requests/second.\e[0m"
          fi
        }

        # Encryption Tool Simulation
        encryption_tool() {
          local target_file="$1"

          echo -e "\e[35m[File Encryption Tool]\e[0m"
          echo -e "\e[31mWARNING: This is a SIMULATION for security testing ONLY.\e[0m"
          echo -e "\e[31mEnsure you have backups before encrypting files.\e[0m"

          if is_safe_mode "localhost"; then  # Encryption tool always runs "safely" on local files
            echo -e "\e[33m[SAFE MODE] Performing dummy encryption on a test file.\e[0m"
            log_action "[SAFE MODE] Performed dummy encryption on a test file."
            target_file="./test_file.txt" # Setting default safe mode
          else
            check_permission "$target_file"
            echo -e "\e[34mSimulating encryption of: $target_file\e[0m"

            # Simulate backup
            cp "$target_file" "$target_file.bak"
            log_action "Backed up $target_file to $target_file.bak"

            # Simulate encryption (in reality, would use tools like `gpg` or `openssl`)
            echo "ENCRYPTED: $(cat "$target_file")" > "$target_file"
            log_action "Simulated encryption of $target_file."

            echo -e "\e[32mEncryption simulation completed. Original file backed up as $target_file.bak.\e[0m"
            echo -e "\e[31mIMPORTANT: To decrypt, replace the encrypted content with the contents of $target_file.bak.\e[0m"
          fi
        }

        # Main Tool Execution
        echo -e "\e[34mAvailable tools: defacement, ddos, encryption\e[0m"
        read -r tool_choice
        echo -e "\e[34mEnter target (e.g., localhost or a URL): \e[0m"
        read -r target

        case "$tool_choice" in
          defacement)
            defacement_tool "$target"
            ;;
          ddos)
            ddos_tool "$target"
            ;;
          encryption)
            encryption_tool "$target"
            ;;
          *)
            echo -e "\e[31mInvalid tool choice. Exiting.\e[0m"
            ;;
        esac

        echo -e "\e[31mIMPORTANT: Remember to remove any test files/artifacts created.\e[0m"
        log_action "Noodles security tool execution completed."